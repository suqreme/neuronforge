import { writeAgentFile } from './fileWriter';
import { useLogStore } from '../stores/logStore';
import { useEditorStore } from '../stores/editorStore';

interface FallbackAppConfig {
  appName?: string;
  includeTailwind?: boolean;
  includeTypeScript?: boolean;
}

export const fallbackTemplates = {
  appTsx: (appName: string = 'NeuronForge App', includeTailwind: boolean = true) => `import React, { useState } from 'react';

function App() {
  const [count, setCount] = useState(0);

  return (
    <div${includeTailwind ? ' className="min-h-screen bg-gray-100 flex items-center justify-center p-8"' : ' style={{ minHeight: "100vh", padding: "2rem", backgroundColor: "#f7fafc", display: "flex", alignItems: "center", justifyContent: "center" }}'}>
      <div${includeTailwind ? ' className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center"' : ' style={{ backgroundColor: "white", borderRadius: "8px", boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)", padding: "2rem", maxWidth: "28rem", width: "100%", textAlign: "center" }}'}>
        <div${includeTailwind ? ' className="text-4xl mb-4"' : ' style={{ fontSize: "2.25rem", marginBottom: "1rem" }}'}>
          🧠
        </div>
        <h1${includeTailwind ? ' className="text-2xl font-bold text-gray-800 mb-4"' : ' style={{ fontSize: "1.5rem", fontWeight: "bold", color: "#2d3748", marginBottom: "1rem" }}'}>
          ${appName}
        </h1>
        <p${includeTailwind ? ' className="text-gray-600 mb-6"' : ' style={{ color: "#718096", marginBottom: "1.5rem" }}'}>
          📦 AI-Generated Fallback Application
        </p>
        
        <div${includeTailwind ? ' className="space-y-4"' : ' style={{ display: "flex", flexDirection: "column", gap: "1rem" }}'}>
          <div${includeTailwind ? ' className="flex items-center justify-center space-x-4"' : ' style={{ display: "flex", alignItems: "center", justifyContent: "center", gap: "1rem" }}'}>
            <button
              onClick={() => setCount(count - 1)}
              ${includeTailwind ? 'className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"' : 'style={{ padding: "0.5rem 1rem", backgroundColor: "#f56565", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}'}
            >
              -
            </button>
            <span${includeTailwind ? ' className="text-xl font-mono bg-gray-100 px-4 py-2 rounded"' : ' style={{ fontSize: "1.25rem", fontFamily: "monospace", backgroundColor: "#f7fafc", padding: "0.5rem 1rem", borderRadius: "4px" }}'}>
              {count}
            </span>
            <button
              onClick={() => setCount(count + 1)}
              ${includeTailwind ? 'className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"' : 'style={{ padding: "0.5rem 1rem", backgroundColor: "#48bb78", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}'}
            >
              +
            </button>
          </div>
          
          <div${includeTailwind ? ' className="text-sm text-gray-500"' : ' style={{ fontSize: "0.875rem", color: "#a0aec0" }}'}>
            🤖 This is a temporary fallback app while AI agents work
          </div>
        </div>
        
        <div${includeTailwind ? ' className="mt-6 pt-4 border-t border-gray-200"' : ' style={{ marginTop: "1.5rem", paddingTop: "1rem", borderTop: "1px solid #e2e8f0" }}'}>
          <p${includeTailwind ? ' className="text-xs text-gray-400"' : ' style={{ fontSize: "0.75rem", color: "#cbd5e0" }}'}>
            Generated by NeuronForge v1.0
          </p>
        </div>
      </div>
    </div>
  );
}

export default App;`,

  mainTsx: `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,

  indexHtml: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NeuronForge App</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`,

  packageJson: (appName: string = 'neuronforge-app') => `{
  "name": "${appName.toLowerCase().replace(/\s+/g, '-')}",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@vitejs/plugin-react": "^4.1.0",
    "typescript": "^5.2.2",
    "vite": "^4.5.0"
  }
}`,

  viteConfig: `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  }
})`,

  tailwindConfig: `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`
};

export async function generateFallbackApp(config: FallbackAppConfig = {}): Promise<void> {
  const {
    appName = 'NeuronForge App',
    includeTailwind = true,
    includeTypeScript = true
  } = config;

  const addLog = useLogStore.getState().addLog;
  const openFile = useEditorStore.getState().openFile;

  try {
    addLog({
      level: 'info',
      source: 'Fallback Generator',
      message: '🔧 Generating fallback React application...',
      timestamp: Date.now(),
      id: `fallback-start-${Date.now()}`
    });

    // Generate essential files
    const files = [
      {
        path: 'src/App.tsx',
        content: fallbackTemplates.appTsx(appName, includeTailwind),
        language: 'typescript'
      },
      {
        path: 'src/main.tsx',
        content: fallbackTemplates.mainTsx,
        language: 'typescript'
      },
      {
        path: 'index.html',
        content: fallbackTemplates.indexHtml,
        language: 'html'
      },
      {
        path: 'package.json',
        content: fallbackTemplates.packageJson(appName),
        language: 'json'
      }
    ];

    if (includeTailwind) {
      files.push({
        path: 'vite.config.ts',
        content: fallbackTemplates.viteConfig,
        language: 'typescript'
      });
      files.push({
        path: 'tailwind.config.js',
        content: fallbackTemplates.tailwindConfig,
        language: 'javascript'
      });
    }

    // Write files and open them in editor
    for (const file of files) {
      await writeAgentFile(file.path, file.content, file.language, 'fallback-generator');
      
      // Open essential files in editor
      if (file.path === 'src/App.tsx' || file.path === 'src/main.tsx') {
        openFile({
          path: file.path,
          content: file.content,
          language: file.language,
          isDirty: false
        });
      }
    }

    addLog({
      level: 'success',
      source: 'Fallback Generator',
      message: `✅ Generated ${files.length} fallback files successfully`,
      timestamp: Date.now(),
      id: `fallback-success-${Date.now()}`
    });

    console.log('🔧 Fallback app generated with files:', files.map(f => f.path));

  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : 'Unknown error';
    
    addLog({
      level: 'error',
      source: 'Fallback Generator',
      message: `❌ Failed to generate fallback app: ${errorMsg}`,
      timestamp: Date.now(),
      id: `fallback-error-${Date.now()}`
    });

    console.error('❌ Fallback generation failed:', error);
    throw error;
  }
}

export function checkMinimumScaffold(): { hasApp: boolean; hasMain: boolean; hasIndex: boolean; needsGeneration: boolean } {
  const { openTabs } = useEditorStore.getState();
  const fileNames = openTabs.map(tab => tab.path);

  const hasApp = fileNames.some(name => 
    name.includes('App.tsx') || 
    name.includes('App.jsx') ||
    name.includes('app.tsx') ||
    name.includes('app.jsx')
  );

  const hasMain = fileNames.some(name => 
    name.includes('main.tsx') || 
    name.includes('main.jsx') ||
    name.includes('index.tsx') ||
    name.includes('index.jsx')
  );

  const hasIndex = fileNames.some(name => 
    name.includes('index.html') ||
    name.includes('index.htm')
  );

  const needsGeneration = !hasApp || !hasMain;

  return {
    hasApp,
    hasMain,
    hasIndex,
    needsGeneration
  };
}

// Helper function to ensure minimum files exist
export async function ensureMinimumScaffold(): Promise<boolean> {
  const check = checkMinimumScaffold();
  
  if (check.needsGeneration) {
    console.log('🔧 Missing essential files, generating fallback scaffold...');
    await generateFallbackApp();
    return true;
  }
  
  return false;
}