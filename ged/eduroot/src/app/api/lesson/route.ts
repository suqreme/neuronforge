import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { subject, grade, topic, subtopic, userId } = await request.json()

    // Validate required fields
    if (!subject || !grade || !topic || !subtopic || !userId) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Check if we have OpenAI API key
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // Check if lesson already exists
    if (supabase) {
      const { data: existingLesson } = await supabase
        .from('lessons')
        .select('*')
        .eq('user_id', userId)
        .eq('subject', subject)
        .eq('grade_level', grade)
        .eq('topic', topic)
        .eq('subtopic', subtopic)
        .single()

      if (existingLesson) {
        return NextResponse.json({
          lesson: existingLesson,
          fromCache: true
        })
      }
    }

    // Generate lesson content with AI
    const lessonPrompt = `
You are an expert teacher creating a lesson for ${grade} students on ${subject}.

Topic: ${topic}
Subtopic: ${subtopic}

Create a comprehensive lesson that includes:
1. Clear explanation suitable for ${grade} level
2. Real-world examples and analogies
3. Step-by-step instructions where applicable
4. Key points to remember

Keep the language appropriate for ${grade} students and make it engaging.
The lesson should be approximately 300-500 words.
`

    const lessonResponse = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are an expert educator who creates clear, engaging lessons for students. Focus on making complex concepts accessible and include practical examples.'
        },
        {
          role: 'user',
          content: lessonPrompt
        }
      ],
      max_tokens: 800,
      temperature: 0.7,
    })

    const lessonContent = lessonResponse.choices[0]?.message?.content || ''

    // Generate quiz questions
    const quizPrompt = `
Based on the lesson content about ${topic} - ${subtopic} for ${grade} students, create 3 multiple choice questions.

For each question, provide:
- A clear question
- 4 answer options (A, B, C, D)
- The correct answer
- A brief explanation of why it's correct

Format as JSON:
{
  "questions": [
    {
      "question": "Question text",
      "options": ["A option", "B option", "C option", "D option"],
      "correct": 0,
      "explanation": "Explanation text"
    }
  ]
}

Lesson content:
${lessonContent}
`

    const quizResponse = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are an expert at creating educational assessments. Create clear, fair quiz questions that test understanding of the key concepts.'
        },
        {
          role: 'user',
          content: quizPrompt
        }
      ],
      max_tokens: 600,
      temperature: 0.3,
    })

    let quizData
    try {
      quizData = JSON.parse(quizResponse.choices[0]?.message?.content || '{}')
    } catch (error) {
      // Fallback quiz if JSON parsing fails
      quizData = {
        questions: [
          {
            question: `What is the main concept in ${subtopic}?`,
            options: ['Option A', 'Option B', 'Option C', 'Option D'],
            correct: 0,
            explanation: 'This is the main concept covered in the lesson.'
          }
        ]
      }
    }

    // Save to database if Supabase is available
    let lessonRecord = null
    if (supabase) {
      const { data, error } = await supabase
        .from('lessons')
        .insert({
          user_id: userId,
          subject,
          grade_level: grade,
          topic,
          subtopic,
          content: lessonContent,
          quiz_data: quizData,
          ai_notes: `Generated by OpenAI GPT-4 on ${new Date().toISOString()}`
        })
        .select()
        .single()

      if (error) {
        console.error('Error saving lesson:', error)
      } else {
        lessonRecord = data
      }
    }

    return NextResponse.json({
      lesson: lessonRecord || {
        content: lessonContent,
        quiz_data: quizData,
        subject,
        grade_level: grade,
        topic,
        subtopic
      },
      fromCache: false
    })

  } catch (error) {
    console.error('Lesson generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate lesson' },
      { status: 500 }
    )
  }
}